EBUS PROTOCOL FOR WORKERS
version 1.0, as of August 2018


WORKER

	Worker IS any software that provides named services to Clients.
	Worker communicates with a Broker which in turn talks to Clients.

	Worker MUST use ZMQ for communication.
	Worker MUST 'connect' to a 'dealer' socket of a Broker (server)

	Worker MAY receive requests from Clients via Broker by receiving REQUEST messages. Each such request MUST specify the name of the requested service.
	Worker MUST listen to messages sent from the Broker to the Worker.
    Worker MUST discard all received messages unless received from a worker.
	Worker MUST treat any valid inbound message from the Broker as a heartbeat.
	Worker MUST send a PING request to broker if no inbound messages were received for a specified amount of time.
	Worker MUST respond to a received PING request by sending a HEARTBEAT message to the Broker.
	Worker MUST assign a uniqueId to each request.
    Worker MUST disconnect all sockets if it receives a DISCONNECT message. Worker MAY then immediatelly reconnect to the Broker.
    Worker MUST disconnect and MAY then reconnect to the Broker if no heartbeats were received in a specified amount of time.
    Worker MAY discard unanswered requests when it receives a REJECT message from a Broker.
    Worker MAY process responses to requests, received in REPLY messages.
	Worker MAY resend unanswered request to the Broker (e.g. after a specified amount of time has passed without an answer), provided that request uniqueid remains the same.
	Worker MAY expire (discard) unanswered messages after a specified amount of time with an answer.


INBOUND MESSAGES
================

HEARBEAT MESSAGE
    Worker MAY receive HEARTBEAT messages on its 'dealer' port.
    These messages notify the Worker that the Broker is still present (delaying re-connect).

    FRAME 0     empty
	FRAME 1		type of sender 		'EBW01'
	FRAME 2		message type 		'HEARTBEAT'


PING MESSAGE 
    Worker MAY receive PING messages on its 'dealer' port.
	With a PING message broker enquires is Worker is still present.
    Worker MUST respond by sending an outbound HEARTBEAT message to the Broker.

    FRAME 0     empty
	FRAME 1		type of sender 		'EBW01'
	FRAME 2		message type 		'PING'


DISCONNECT MESSAGE
    Worker MAY receive DISCONNECT messages on its 'dealer' port.
    Broker requires Worker to disconnect.
    Worker MUST close all ports and MAY immediatelly reconnect.

    FRAME 0     empty
	FRAME 1		type of sender 		'EBW01'
	FRAME 2		message type 		'DISCONNECT'


REJECT MESSAGE    
    Worker MAY receive REJECT messages from Workers (via Broker).
    A REJECT message means that a Worker has rejected a service request.
    Worker MAY discard the rejected request.
    Worker MAY NOT re-submit rejected requests only because they were rejected.

    FRAME 0     empty
	FRAME 1		type of sender 		'EBW01'
	FRAME 2		message type 		'REJECT'    


REPLY MESSAGE
    Worker MAY receive REPLY messages from Workers (via Broker).
	With a REPLY message, a Worker is returning results for a previously sent request.
    Worker MUST discard REPLY messages for requests that were not initiated by this Worker.

    FRAME 0     empty
	FRAME 1		type of sender 		'EBW01'
	FRAME 2		message type 		'REPLY'
	FRAME 3		original requestId
	FRAME 4		json formatted data (optional)


SUB MESSAGE
    Worker MAY 'connect' to a 'sub' socket to receive broadcast.
    Worker MAY subscribe to serveral channels. Each channel is matched by the begining of its name (subscrition to "A" matches "A", "AB", "ABCD" etc).
    Worker MAY receive published notifications for subscribed channels.


OUTBOUND MESSAGES
=================

REQUEST MESSAGE
    Worker MUST direct service requests to its 'dealer' socket.
	Request service of specified name.
    Broker MAY respond with REPLY or REJECT message.
	
    FRAME 0     empty
    FRAME 1		type of sender 		'EBC01'
	FRAME 2		message type 		'REQUEST'
    FRAME 3     service name        (a string)
	FRAME 4		request uniqueid    (a string)
	FRAME 5		json formatted data (optional)


PUBLISH MESSAGE
    Worker MAY connect to its 'pub' socket  to  broadcast messages.
    Worker MUST publish broadcasts by specifying a 'channel'.